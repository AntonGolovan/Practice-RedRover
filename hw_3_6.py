# Домашнее задание 3

"""
Четное или нечетное?
Создать переменную n, значение которой определяется через ввод данных с клавиатуры.
Если n является четным числом, то вывести на экран слово “четное”.
Если n является нечетным числом, то вывести на экран слово “нечетное”.
"""
from curses.ascii import isalpha

# print(result:= "четное" if int(input()) % 2 == 0 else "нечетное")


"""
Какой сегодня день?
Создать переменную day, значение которой определяется через ввод данных с клавиатуры.
Если значение day равно “суббота” или “воскресенье”, то вывести на экран строку “Сегодня выходной!”.
Если значение day равно “среда”, то вывести на экран “Мне сегодня к стоматологу в 15:30”.
Во всех остальных случая выводить на экран “Сегодня обычный день.”.
"""

# day = input()
#
# if day == "суббота" or day == "воскресенье":
#     print("Сегодня выходной!")
# elif day == "среда":
#     print("Мне сегодня к стоматологу в 15:30")
# else:
#     print("Сегодня обычный день.")
#

"""
Создать переменную n, значение которой определяется через ввод данных с клавиатуры (целое число).
Создать переменную text, значение которой определяется через ввод данных с клавиатуры (строка).
Программа должна вывести вашу строку text на экран n-раз. Если вы ввели 3, а затем “Ау”, то результат должен быть:
"""
# text = input()
# n = int(input())
# print(f"{text}\n" * n)


"""
Сколько гласных букв?
Создать переменную message, значение которой определяется через ввод данных с клавиатуры.
Программа должна вывести на экран количество гласных букв в строке message. Например, если была введена строка “Мой кот уверен, что клавиатура – это специально для него купленный массажер”, то программа должна вывести 26.

# Подразумевается, что подсчитываться должна только кириллица, то есть буквы а, о, у, ы и так далее.
"""

# message = input()
# list_words = ["а", "о", "у", "е", "ё", "ы", "э", "ю", "я", "и"]
#
# print(len([word for word in message if (word in list_words) and word.isalpha()]))

"""
Сумма чисел.
Программа должна запрашивать у пользователя ввести число с клавиатуры. После того как пользователь ввел число (пользователь должен вводить только целые числа), она должна опять попросить его ввести число и так должно продолжаться пока пользователь не введет отрицательное число. Как только пользователь ввел отрицательное число, программа должна вывести сумму всех чисел, которые он вводил до этого (не включая отрицательное) и завершиться. Например, если ввод пользователя выглядит так:
43
1
345
-1

"""

# numbers_list = []
#
# while True:
#     number = int(input("Введите число: "))
#     if number < 0:
#         numbers_list.append(number)
#         break
#     numbers_list.append(number)
#
# print(sum(numbers_list))


# Домашнее задание 4

"""
Особые числа.
Сгенерируйте список numbers, состоящий из чисел в диапазоне от 0 до 100 включительно, которые делятся без остатка как на 2, так и на 3.
Выведите список numbers на экран. 

Ответ: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96]
# Решите эту задачу в 2 способа - с помощью генератора списков и без него.

"""

# Способ 1
# numbers = [i for i in range(101) if i % 2 == 0 and i % 3 == 0]
# print(numbers)
#
# Способ 2
# numbers_2 = []
# for i in range(101):
#     if i % 2 == 0 and i % 3 == 0:
#         numbers_2.append(i)
# print(numbers_2)

"""
Имеется список items = [1.2, 3, None, 100, {'info': 'bla-bla'}, 44, 'Hi!', 99, 44.32, None]
Составьте новый список numbers, который содержит только целые числа (int) и вещественные числа (float) из списка items. 
Выведите на экран сумму чисел в numbers.

"""

# items = [1.2, 3, None, 100, {'info': 'bla-bla'}, 44, 'Hi!', 99, 44.32, None]
#
# new_items = [i for i in items if isinstance(i, (int, float))]

# print((sum(new_items)))

"""
История сообщений.
Создать список messages, который будет хранить “сообщения”.
Программа должна в бесконечном цикле запрашивать у пользователя ввести сообщение (строку) с клавиатуры и сохранять ее в список messages. Причем программа должна запоминать не более 5 последних сообщений. То есть, если длина списка messages превысила 5, то первое сообщение в нем должно быть удалено. 
Если пользователь ввел “Пока”, то программа должна вывести “Ну ладно, пока!” и список последних сообщения на экран.

Пример: если пользователь вводил такие сообщения (без кавычек): “Привет!”, “Как твои дела?”, “Как твое настроение?”, “Бла-бла-бла”, “Что нового?”, “Сори я занят”, “Пока”
То программа должна вывести:

Ну ладно, пока!
['Как твое настроение?', 'Бла-бла-бла', 'Что нового?', 'Сори я занят', 'Пока']

"""

# messages = []
#
# while True:
#     message = input("Введите сообщение: ")
#     messages.append(message)
#     if len(messages) > 5:
#         messages.pop(0)
#     if message == "Пока":
#         print("Ну ладно, пока!")
#         break
# print(messages)


"""
Магазин.
Есть словарь с товарами:
products = {
     "apple": {"quantity": 10, "price": 100},
    "banana": {"quantity": 20, "price": 50},
    "orange": {"quantity": 15, "price": 80},
    "grape": {"quantity": 8, "price": 120},
    "milk":{"quantity": 12, "price": 90},
     "bread": {"quantity": 30, "price": 40}
}
Необходимо увеличить цену всех продуктов на 20 процентов.
Удалить товар “milk”.
Добавить товар “Salt” с количеством 7 и ценой 12.
Вывести общую стоимость всех товаров в магазине.

"""


# products = {
#     "apple": {
#         "quantity": 10,
#         "price": 100
#     },
#     "banana": {
#         "quantity": 20,
#         "price": 50
#     },
#     "orange": {
#         "quantity": 15,
#         "price": 80
#     },
#     "grape": {
#         "quantity": 8,
#         "price": 120
#     },
#     "milk": {
#         "quantity": 12,
#         "price": 90
#     },
#     "bread": {
#         "quantity": 30,
#         "price": 40
#     }
# }
#
# for key in products:
#     products[key]["price"] =  products[key]["price"] * 1.2
#
# del products["milk"]
#
# products["Salt"] = {
#     "quantity": 7,
#     "price": 12
# }
#
# coast_products = 0
#
# for key in products:
#     coast_products += products[key]["price"] * products[key]["quantity"]
#
# print(coast_products)

"""
Alice.
Есть два списка одинаковой длины:
keys = ['name', 'age', 'city', 'occupation', 'email', 'phone', 'hobby', 'education', 'company', 'salary']

values = ['Alice', 30, 'New York', 'Engineer', 'alice@example.com', '+1234567890', 'Reading', 'Masters in Computer Science', 'TechCorp', 90000]

Создайте словарь info из ключей keys и значений values. (Каждое значение занимает ту же позицию, что и ключ в другом списке)
Выведите словарь info на экран.

"""

# keys = ['name', 'age', 'city', 'occupation', 'email', 'phone', 'hobby', 'education', 'company', 'salary']
# values = ['Alice', 30, 'New York', 'Engineer', 'alice@example.com', '+1234567890', 'Reading', 'Masters in Computer Science', 'TechCorp', 90000]
#
# info = dict(zip(keys, values))
#
# print(info)

"""
Шифр.
Есть сообщение (строка):
"2__234йшDGмёшSDFжкъrrrщзнSDF78юкйфуSDFшёью$#2Sшжйи3%узфsdf34нкфыvvя" 
И ключ к шифру, где каждую букву нужно заменить на ее значение в словаре: 
cipher = {
    "а": "щ", "б": "д", "в": "ю", "г": "ф", "д": "з", "е": "м", "ё": "р",
    "ж": "т", "з": "п", "и": "я", "й": "с", "к": "н", "л": "э", "м": "к",
    "н": "л", "о": "ё", "п": "ж", "р": "ц", "с": "б", "т": "у", "у": "в",
    "ф": "о", "х": "и", "ц": "х", "ч": "г", "ш": "е", "щ": "й", "ъ": "ы",
    "ы": "ч", "ь": "ш", "э": "ъ", "ю": "а", "я": "ь"
}
Расшифруйте секретное сообщение с помощью ключа cipher, при этом мусорные значение (которых нет в словаре) должны быть пропущены и не добавлены в результат.
Выведите результат на экран.
Дополнительно: напишите программу, которая получает строку через ввод с клавиатуры и “отправляет” зашифрованный ответ агенту. 

"""

# str_hash = "2__234йшDGмёшSDFжкъrrrщзнSDF78юкйфуSDFшёью$#2Sшжйи3%узфsdf34нкфыvvя"
#
# list_words = [item.lower() for item in str_hash if item.isalpha()]
# print(list_words)
#
# cipher = {
#     "а": "щ",
#     "б": "д",
#     "в": "ю",
#     "г": "ф",
#     "д": "з",
#     "е": "м",
#     "ё": "р",
#     "ж": "т",
#     "з": "п",
#     "и": "я",
#     "й": "с",
#     "к": "н",
#     "л": "э",
#     "м": "к",
#     "н": "л",
#     "о": "ё",
#     "п": "ж",
#     "р": "ц",
#     "с": "б",
#     "т": "у",
#     "у": "в",
#     "ф": "о",
#     "х": "и",
#     "ц": "х",
#     "ч": "г",
#     "ш": "е",
#     "щ": "й",
#     "ъ": "ы",
#     "ы": "ч",
#     "ь": "ш",
#     "э": "ъ",
#     "ю": "а",
#     "я": "ь"
# }
#
# shifr = []
#
# for i in list_words:
#     if cipher.get(i):
#         shifr.append(cipher.get(i))
#
# print(result := ''.join(shifr))
# print(' '.join(["скретный", "план", "совершается", "в", "полночь"]))


"""
Самая популярная буква.
Есть строка:
dialog = '''Doc: Запомни! Согласно моей теории, ты помешал знакомству своих родителей.
Если они не встретятся, то не влюбятся, не поженятся, и у них не будет детей.
Поэтому твой старший брат исчезает с фотографии. Затем очередь твоей сестры,
и если ты все не исправишь, ты будешь следующим.
Marty: Тяжелый случай.
Doc: Вес тут совершенно ни при чем.'''
# Тройные кавычки позволяют удобно писать текст в несколько строк.
С помощью словаря подсчитайте количество букв в строке dialog игнорируя регистр. Ключами в словаре должны быть буквы, а значения - количество вхождения буквы в текст. Например: {'т': 26, 'е': 32...}
Вывести на экран букву, которая встречается максимальное количество раз.

"""


dialog = """Doc: Запомни! Согласно моей теории, ты помешал знакомству своих родителей.
Если они не встретятся, то не влюбятся, не поженятся, и у них не будет детей.
Поэтому твой старший брат исчезает с фотографии. Затем очередь твоей сестры,
и если ты все не исправишь, ты будешь следующим.
Marty: Тяжелый случай.
Doc: Вес тут совершенно ни при чем. """

# counter_words = {k: dialog.count(k) for k in dialog if k.isalpha()}
# print(counter_words)
#
# for key, value in counter_words.items():
#     if counter_words.get(key) == max(counter_words.values()):
#         print(key)
#         break

# Домашнее задание 5

"""
Продвинутый sum.
Встроенная функция sum() в python вызывает ошибку, если один из элементов последовательности не является числом, например sum([1, 2, ‘A’]).
Напишите функцию sum_ignore_non_numbers(), которая имеет один параметр items (список или кортеж). 
Функция должна вернуть сумму всех чисел (int, float) в переданной последовательности. При этом все нечисловые значения должны игнорироваться. 
Если чисел нет, то функция должна вернуть 0.
Если вызвать функцию со списком [1, 2, 'Hey', None, 4.3], то она должна вернуть 7.3
"""

# def sum_ignore_non_numbers(*args):
#     number_list = [number for number in args if isinstance(number, (int, float))]
#     if len(number_list) > 0:
#         return sum(number_list)
#     return 0
#
# print(sum_ignore_non_numbers(1, 2, 'Hey', None, 4.3))
# print(sum_ignore_non_numbers("2", "4", None))

"""
Треугольник.
Треугольник возможен, если сумма любых двух его сторон больше длины третьей стороны.
Напишите функцию is_triangle(), которая имеет 3 параметра - длины сторон треугольника. 
Функция должна возвращать True, если треугольник с переданными сторонами может существовать, и False в противном случае.
Для is_triangle(2, 4, 9) правильный ответ - False, для is_triangle(3, 4, 5) - True.
"""
#
# def is_triangle(a, b, c):
#     c, b, a = sorted((a, b, c), reverse=True)
#     if a + b > c:
#         return True
#     return False
#
# print(is_triangle(6, 4, 9))
#

"""
Среднее значение.
Напишите функцию average(), которая принимает произвольное количество позиционных аргументов. (Можно передать любое число аргументов).
Функция должна посчитать среднее арифметическое всех переданных чисел. (Представим, что в функцию передаются только числа).
Если не передать ни одного аргумента, то функция должна вернуть 0.

Такой вызова функции average(1, 2, 3, 4, 5, 6, 7, 8) должен вернуть 4.5
"""

# def average(*args):
#     if len(args) == 0:
#         return 0
#     result = sum(args) / len(args)
#     return result

"""
Общие строки.
Напишите функцию common_strings(), которая имеет 3 параметра: list1, list2 и ingore_case=True (значение по умолчанию).
Функция должна вернуть новых список из тех значений, которые встречаются в обоих списках. При этом, если ignore_case равен True, то функция должна игнорировать регистр и считать строки “string” и “STRING” одинаковыми.  В противном случае функция должна учитывать регистр символов и считать такие строки разными.
Все строки в результирующем списке должны быть в нижнем регистре.
Например, существуют 2 списка:
fruits_1 = [‘banana’, ‘APPLE’, ‘watermelon’, ‘cherry’] 
fruits_2 = [‘Mango’, ‘apple’, ‘orange’, ‘cherry’]
То вызов функции common_strings(fruits_1, fruits_2) должен вернуть [‘apple’, ‘cherry’].
"""

# def common_strings(list1, list2, ingore_case=True):
#     if ingore_case:
#         list1 = [item.lower() for item in list1]
#         set_1 = set(list1)
#         set_2 = set(list2)
#         return set_1.intersection(set_2)
#     else:
#         set_1 = set(list1)
#         set_2 = set(list2)
#         return set_1.intersection(set_2)
#
# fruits_1 = ["banana", "APPLE", "watermelon", "cherry"]
# fruits_2 = ["Mango", "apple", "orange", "cherry"]
#
# print(list(common_strings(fruits_1, fruits_2, False)))


"""
КаКоЕ-тО вОлНеНиЕ.

Создать переменную text, значение которой определяется через ввод данных с клавиатуры.
Каждый символ под четным индексом должен быть переведен в верхний регистр, а каждый нечетный в нижний.
Вывести полученную строку на экран.

Если была введена строка “Чтобы продать что-нибудь ненужное, нужно сначала купить что-нибудь ненужное, а у нас денег нет.”, то результат должен быть  “ЧтОбЫ ПрОдАтЬ ЧтО-НиБуДь нЕнУжНоЕ, нУжНо сНаЧаЛа кУпИтЬ ЧтО-НиБуДь нЕнУжНоЕ, а у нАс дЕнЕг нЕт.”
"""

# text = input()
# my_list = []
#
# for letter in text:
#     if text.find(letter) % 2 == 0 and letter.isalpha():
#         my_list.append(letter.upper())
#     else:
#         my_list.append(letter.lower())
# print(''.join(my_list))

# Домашнее задание 6

"""Анонимная функция 🎭.
Создайте анонимную функцию pow, которая принимает 2 аргумента x и y. Функция должна возвращать x, возведенное в степень y."""

# pow = lambda x, y: x ** y
#
# print(pow(2, 2))

"""
Змея 🐍.
Создайте функцию snake_talk, которая принимает 1 аргумент text (строка).
Функция должна создать новую строку, где все гласные буквы aeiouyAEIOUY в строке text дублируются.
Например, такой вызовы функции snake_talk(“Harry”) должен вернуть строку “Haaryy”.

"""

# def snake_talk(text: str):
#     vowel_letters = "aeiouyAEIOUY"
#
#     result = ""
#     for letter in text:
#         if letter in vowel_letters:
#             result += (letter * 2)
#         else:
#             result += letter
#     return result
#
# print(snake_talk("Hello"))
